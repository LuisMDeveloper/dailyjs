---
layout: post
title: "Node Roundup"
author: Alex Young
categories: 
- node
- server
- scraping
- services
- testing
---

Welcome to the Node Roundup. Send in your apps and libraries using our "contact form":/contact.html or "@dailyjs":http://twitter.com/dailyjs.

h3. Node.io

"node.io":http://node.io/ (MIT License) by Chris O'Hara is a distributed data scraping and processing framework.  It uses "node-htmlparser":https://github.com/tautologistics/node-htmlparser, "node-soupselect":https://github.com/harryf/node-soupselect, and "multi-node":https://github.com/kriszyp/multi-node to provide flexible and friendly tools for building scrapers.

There's a node.io command-line script that runs jobs.  Jobs look a bit like standard CommonJS modules:

{% highlight javascript %}
var nodeio = require('node.io'),
    options = {},
    methods = {};

exports.job = new nodeio.Job(options, methods);
{% endhighlight %}

The <code>methods</code> variable contains <code>run</code> and <code>fail</code> methods that will be run on each worker.  Jobs can be linked together through <code>STDIN</code> and <code>STDOUT</code>.

I actually have a freelance client for whom I write a lot of scrapers (permission is given by the scraped sites), and I kept thinking Node would be a good choice for scraping.  In particular writing selectors with a jQuery-like API makes scraping pretty easy.  I haven't looked at how deep the HTTP manipulation can get; I've needed access to cookies and the full range of HTTP methods to scrape some sites.

h3. JsApp.US

!/images/posts/jsapp.png!

"JsApp.US":http://jsapp.us/ by Matthew Francis-Landau (sent by "@jefkoslowski":http://twitter.com/jefkoslowski/status/9768460347244544) is a hosting platform for Node apps.  It's possible to run an app without registering, but user accounts can be created for features like sharing apps or accessing a virtual file system.

There's a "database API":https://github.com/matthewfl/node-host/wiki/Api, and some "sample apps":https://github.com/matthewfl/node-host/wiki/Samples.

I think the project might be open sourced at some point, because the GitHub repository that contains the wiki says "When the source becomes public, this is where it will be".

h3. Should

"should.js":https://github.com/visionmedia/should.js (MIT License) by that stalwart JavaScript hacker TJ Holowaychuk is a test framework agnostic assertion library for Node.  The syntax is possibly inspired by "Thoughtbot's shoulda":https://github.com/thoughtbot/shoulda, but it's a little bit different:

{% highlight javascript %}
var user = {
    name: 'tj'
  , pets: ['tobi', 'loki', 'jane', 'bandit']
};

user.should.have.property('name', 'tj');
user.should.have.property('pets').with.lengthOf(4)
{% endhighlight %}

It sounds like TJ has a lot of pets!

As you might have realised, this library extends <code>Object</code> with a getter.  By using a single getter on <code>Object</code>, TJ has managed to cut down a lot of line noise that would typically be created by using function calls.  This might put you off, but he addresses this decision in his README:

bq. OMG IT EXTENDS OBJECT???!?!@ Yes, yes it does, with a single getter _should_, and no it wont break your code, because it does this *properly* with a non-enumerable property.

If any of this seems confusing, look at the documentation for "defineProperty":https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/defineProperty and read through "lib/should.js":https://github.com/visionmedia/should.js/blob/master/lib/should.js:

{% highlight javascript %}
Object.defineProperty(Object.prototype, 'should', {
  set: function(){},
  get: function(){
    return new Assertion(this);
  }
});
{% endhighlight %}


