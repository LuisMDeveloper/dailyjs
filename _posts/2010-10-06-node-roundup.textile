---
layout: post
title: "Node Roundup"
author: Alex Young
categories: 
- node
- server
- testing
- sockets
---

Welcome to the Node Roundup. Send in your apps and libraries using our "contact form":/contact.html or "@dailyjs":http://twitter.com/dailyjs.

h3. Faker.js

"Faker.js":http://github.com/marak/Faker.js (MIT License) by Marak Squires can be used in Node or a browser.  It allows fake data to be generated, for testing or rapid prototyping:

{% highlight javascript %}
var Faker = require('./Faker');
Faker.Name.findName(); // Maximillia Hodkiewicz
Faker.Internet.email(); // Gabriella.Hermann@bartholome.co.uk
{% endhighlight %}

There's a "demo":http://maraksquires.com/Faker.js/ showing the types of data the library can generate.

I like using libraries like this with factories for quickly writing tests (yes, I'm that lazy!)

h3. Nodestream

"Nodestream":http://github.com/LearnBoost/nodestream released through "LearnBoost":https://www.learnboost.com/ under an MIT License is a library used to connect realtime code to templates.  It's built on "Jade":http://jade-lang.com/ and "Socket.IO":http://github.com/learnboost/socket.io-node and adds a <code>:realtime</code> option to your Jade templates.

The simple example in the documentation demonstrates how to count the number of people viewing your site:

{% highlight javascript %}
var connections = 0;
var nodestream = io.listen(app).nodestream()
  .on('connect', function(){
    connections++;
    this.emit('connections', connections);
  })
  .on('disconnect', function(){
    connections--;
    this.emit('connections', connections);
  });
{% endhighlight %}

Template:

{% highlight javascript %}
:realtime(repaint: 'connections', local: 'connections')
  .connections
    - if (connections > 1)
      p #{connections} people are editing right now
    - else
      p You're all alone, loser
{% endhighlight %}

The Socket.IO library ("server":http://github.com/LearnBoost/Socket.IO-node, "client":http://github.com/LearnBoost/Socket.IO) supports various transports depending on the browser: WebSocket, Flash, forever iframe, XHR long polling, and XHR multipart encoded.  These are abstracted to look like a WebSocket-like API.

h3. Soda

Also from LearnBoost (by "TJ Holowaychuk":http://github.com/visionmedia and "Adam Christian":http://github.com/admc) is "Soda":http://github.com/learnboost/soda, which is a "Selenium":http://seleniumhq.org/ adapter for Node.  This allows you to script browser tests, like this:

{% highlight javascript %}
browser
  .chain
  .session()
  .open('/')
  .type('q', 'Hello World')
  .testComplete()
  .end(function(err){
    if (err) throw err;
    console.log('done');
  });
{% endhighlight %}

h3. Lingo

Meanwhile, I noticed TJ has released "Lingo":http://github.com/visionmedia/lingo, which provides inflection support and other string transformations.  For example:

{% highlight javascript %}
en.pluralize('fox');
// foxes

en.singularize('foxes');
// fox

lingo.capitalize('hello there');
// Hello there
{% endhighlight %}

There's i18n support and a bunch of other methods.

h3. STDIN Support for Node

While I was looking through Lingo I saw that TJ also wrote a "Node patch to add STDIN args":http://github.com/visionmedia/node/commit/977c265482daf678cb60663e221292f20218e78e.  His patch adds - and --stdin flags to the command line arguments.  I didn't realise Node couldn't do this already, which is surprising because it's pretty important for shell scripts.

