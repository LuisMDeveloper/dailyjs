---
layout: post
title: "Node Tutorial Part 13: Email"
author: Alex Young
categories: 
- server
- node
- tutorials
- lmawa
- nodepad
- npm
- express
- stylus
- css
---

Welcome to part 14 of _Let's Make a Web App_, a tutorial series about building a web app with "Node":http://nodejs.org/.  This series will walk you through the major areas you'll need to face when building your own applications.  These tutorials are tagged with "lmawa":/tags.html#lmawa.

Previous tutorials:

* "Part 1: Introduction":http://dailyjs.com/2010/11/01/node-tutorial/ 
* "Part 2: Installation and Skeleton App":http://dailyjs.com/2010/11/08/node-tutorial-2/, source code commit: "4ea936b":https://github.com/alexyoung/nodepad/commit/4ea936b4b426012528fc722c7576391b48d5a0b7
* "Part 3: RESTful Methods and Testing":http://dailyjs.com/2010/11/15/node-tutorial-3/, source code commit: "39e66cb":https://github.com/alexyoung/nodepad/commit/39e66cb9d11a67044495beb0de1934ac4d9c4786
* "Part 4: Templates, Partials, Creating and Editing Documents":http://dailyjs.com/2010/11/22/node-tutorial-4/, source code commit: "f66fdb":https://github.com/alexyoung/nodepad/commit/f66fdb5c3bebdf693f62884ffc06a40b93328bb5
* "Part 5: Authentication, Sessions, Access Control Middleware":http://dailyjs.com/2010/12/06/node-tutorial-5/, source code commit: "03fe9b":https://github.com/alexyoung/nodepad/tree/03fe9b272fea1beb98ffefcf5f7ed226c81c49fd
* "Part 6: Interface Basics":http://dailyjs.com/2010/12/20/node-tutorial-6/, source code commit: "f2261c":https://github.com/alexyoung/nodepad/tree/f2261c510c987b35df1e6e000be6e1e591cd9d6d
* "Part 7: Node Library Versions, Jade Tricks, Error Pages":http://dailyjs.com/2010/12/27/node-tutorial-7/, source code commit: "929f5":https://github.com/alexyoung/nodepad/tree/929f5642ca1b2fa664df517457e056c92490d892
* "Part 8: Flash Messages and Helpers":http://dailyjs.com/2011/01/03/node-tutorial-8/, source code commit: "841a49":https://github.com/alexyoung/nodepad/tree/841a493c03f0421dd1a2279fccac3fbcf1e17b1f
* "Part 9: Remember Me":http://dailyjs.com/2011/01/10/node-tutorial-9/, source code commit: "1904c":https://github.com/alexyoung/nodepad/tree/1904c6b7f95d708474a5d42e8cdfd40e96243a7a
* "Part 10: Markdown":http://dailyjs.com/2011/01/24/node-tutorial-10/, source code commit: "11d33":https://github.com/alexyoung/nodepad/tree/11d33e19066e76c8559857fb780ac9fd1ecf68ac
* "Part 11: Better Testing":http://dailyjs.com/2011/01/31/node-tutorial-11/, source code commit: "6a269ce":https://github.com/alexyoung/nodepad/tree/6a269ce4ddb6c7dc78598b488c93b38828fb5763
* "Part 12: Updating Mongoose":http://dailyjs.com/2011/02/07/node-tutorial-12/, source code commit: "2a8725":https://github.com/alexyoung/nodepad/tree/2a8725f089ef052ec8b4ccfed8f6fbece70a606a
* "Part 13: Stylus":http://dailyjs.com/2011/02/14/node-tutorial-13/, source code commit: "0a70e40":https://github.com/alexyoung/nodepad/tree/0a70e40cafd982c1f2421ecf16caa887fc49ae39

h3. Email

Nodepad should send customer support emails -- sign up notifications, password resets -- that kind of thing.  So far I haven't touched on email in this tutorial series, but it's required by most web applications.

Node already has a few SMTP libraries and the two most active ones have very similar APIs and names.  I have no particular preference because I haven't done anything complicated with them.  If you have in-depth experience with SMTP and Node, readers may enjoy to hear from you in the comments.

I've decided to use "node_mailer":https://github.com/marak/node_mailer by Marak Squires.  It can be installed with npm:

{% highlight sh %}
npm install mailer@0.4.52
{% endhighlight %}

As of today, mailer is at version 0.4.52.  I've updated Nodepad's package.json and the app.js require to reflect this.

h3. SMTP API

Sending an email looks like this:

{% highlight javascript %}
var mailer = require('mailer');

mailer.send({
    // node_mailer supports authentication,
    // docs at: https://github.com/marak/node_mailer
    host:    'localhost',
    port:    '25',
    to:      'alex@example.com',
    from:    'nodepad@example.com',
    subject: 'Welcome to Nodepad',
    body:    'All work and no play makes DailyJS pretty dull'
  },

  // Your response callback
  function(err, result) {
    if (err) {
      console.log(err);
    }
  }
);
{% endhighlight %}

If you've got a local SMTP daemon running, this code should work.  Of course, you'll need to change the _to_ parameter to actually receive an email.

h3. Development Mode

I thought it would be wise to only send mails when running in production mode, and I wanted to render mails using Jade.  My example will be a plain text email for now, but using Jade should simplify HTML emails later.

The mail settings can be put in the <code>app.configure</code> function:

{% highlight javascript %}
app.configure(function() {
  app.set('mailOptions', {
    host:    'localhost',
    port:    '25',
    from:    'nodepad@example.com',
  });
  // ... snip ...
{% endhighlight %}

You could override this with development and production email server settings.

h3. Simulating SMTP Locally

By the way, node_mailer comes bundled with <code>stubSMTP</code>.  This script will allow you to receive mails and view them.  The results look like this:

{% highlight text %}
---------- MESSAGE FOLLOWS ----------
From: nodepad@example.com
To: alex@example.com
Subject: Welcome to Nodepad
Content-Type: text/plain
X-Peer: 127.0.0.1

Dear alex@example.com,
 
Welcome to Nodepad!
 
Regards,
 
The Nodepad Mail Robot
------------ END MESSAGE ------------
{% endhighlight %}

It would be nice if node_mailer included this as a binary in its package.json, then we could easily fire it up for local testing.

h3. Email Object

I made an <code>emails</code> object to manage sending mail:

{% highlight javascript %}
emails = {
  send: function(template, mailOptions, templateOptions) {
    mailOptions.to = mailOptions.to;
    jade.renderFile(path.join(__dirname, 'views', 'mailer', template), templateOptions, function(err, text) {
      // Add the rendered Jade template to the mailOptions
      mailOptions.body = text;

      // Merge the app's mail options
      var keys = Object.keys(app.set('mailOptions')),
          k;
      for (var i = 0, len = keys.length; i < len; i++) {
        k = keys[i];
        if (!mailOptions.hasOwnProperty(k))
          mailOptions[k] = app.set('mailOptions')[k]
      }

      console.log('[SENDING MAIL]', sys.inspect(mailOptions));

      // Only send mails in production
      if (app.settings.env == 'production') {
        mailer.send(mailOptions,
          function(err, result) {
            if (err) {
              console.log(err);
            }
          }
        );
      }
    });
  },

  sendWelcome: function(user) {
    this.send('welcome.jade', { to: user.email, subject: 'Welcome to Nodepad' }, { locals: { user: user } });
  }
};
{% endhighlight %}

Just in case you've forgotten, <code>app.set(name)</code> _returns_ a configuration value. A second option would set it.  I've put that option merging loop in there to make it easy to support more options in the future; it probably doesn't really need it.

Additional emails could be created by adding a template to <code>views/mailer/</code> and adding a method that uses <code>emails.send</code>.  The <code>sendWelcome</code> method is very simple, most emails will probably look a bit like this.  The two sets of options <code>send</code> accepts are for the node_mailer <code>send</code> method and Jade's <code>renderFile</code>.

Here we've actually created a little email management class simply by relying on everything Express, Jade, and node_mailer gives us.  The <code>emails</code> object is just a simple way to wrap up our email management requirements.

The Jade template looks like this:

{% highlight text %}
| Dear #{user.email},
| 
| Welcome to Nodepad!
| 
| Regards,
| 
| The Nodepad Mail Robot
{% endhighlight %}

The Jade template isn't actually very nice, I had to escape each line because we're generating plain text rather than HTML.  A "real" email management object, something more generic, might detect if a template is plain text (perhaps based on file name), and then render it appropriately.  In this case, "ejs":https://github.com/visionmedia/ejs might be better for plain text emails.

h3. Sending Emails

Now the user creation action, <code>app.post('/users.:format?', ...</code> just does this when a user is saved:

{% highlight javascript %}
emails.sendWelcome(user);
{% endhighlight %}

h3. Conclusion

Sending emails is fairly easy, but dealing with templates and appropriate behaviour based on environment (development, testing, production) takes a bit of thought.

The current commit of Nodepad is "2e81a7b":https://github.com/alexyoung/nodepad/tree/2e81a7b8a1863db75485e4c49af5753a21266178

h3. References

* "node_mailer":https://github.com/marak/node_mailer
* "Jade":http://jade-lang.com/
* "ejs":https://github.com/visionmedia/ejs

