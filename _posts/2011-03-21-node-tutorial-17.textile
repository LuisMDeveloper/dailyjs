---
layout: post
title: "Node Tutorial Part 17: UI Improvements"
author: Alex Young
categories: 
- server
- node
- tutorials
- lmawa
- nodepad
---

Welcome to part 17 of _Let's Make a Web App_, a tutorial series about building a web app with "Node":http://nodejs.org/.  This series will walk you through the major areas you'll need to face when building your own applications.  These tutorials are tagged with "lmawa":/tags.html#lmawa.

<a href="#" class="showPrevious">Click to show previous tutorials</a>.

<div class="previous" style="display: none">
* "Part 1: Introduction":http://dailyjs.com/2010/11/01/node-tutorial/ 
* "Part 2: Installation and Skeleton App":http://dailyjs.com/2010/11/08/node-tutorial-2/, source code commit: "4ea936b":https://github.com/alexyoung/nodepad/commit/4ea936b4b426012528fc722c7576391b48d5a0b7
* "Part 3: RESTful Methods and Testing":http://dailyjs.com/2010/11/15/node-tutorial-3/, source code commit: "39e66cb":https://github.com/alexyoung/nodepad/commit/39e66cb9d11a67044495beb0de1934ac4d9c4786
* "Part 4: Templates, Partials, Creating and Editing Documents":http://dailyjs.com/2010/11/22/node-tutorial-4/, source code commit: "f66fdb":https://github.com/alexyoung/nodepad/commit/f66fdb5c3bebdf693f62884ffc06a40b93328bb5
* "Part 5: Authentication, Sessions, Access Control Middleware":http://dailyjs.com/2010/12/06/node-tutorial-5/, source code commit: "03fe9b":https://github.com/alexyoung/nodepad/tree/03fe9b272fea1beb98ffefcf5f7ed226c81c49fd
* "Part 6: Interface Basics":http://dailyjs.com/2010/12/20/node-tutorial-6/, source code commit: "f2261c":https://github.com/alexyoung/nodepad/tree/f2261c510c987b35df1e6e000be6e1e591cd9d6d
* "Part 7: Node Library Versions, Jade Tricks, Error Pages":http://dailyjs.com/2010/12/27/node-tutorial-7/, source code commit: "929f5":https://github.com/alexyoung/nodepad/tree/929f5642ca1b2fa664df517457e056c92490d892
* "Part 8: Flash Messages and Helpers":http://dailyjs.com/2011/01/03/node-tutorial-8/, source code commit: "841a49":https://github.com/alexyoung/nodepad/tree/841a493c03f0421dd1a2279fccac3fbcf1e17b1f
* "Part 9: Remember Me":http://dailyjs.com/2011/01/10/node-tutorial-9/, source code commit: "1904c":https://github.com/alexyoung/nodepad/tree/1904c6b7f95d708474a5d42e8cdfd40e96243a7a
* "Part 10: Markdown":http://dailyjs.com/2011/01/24/node-tutorial-10/, source code commit: "11d33":https://github.com/alexyoung/nodepad/tree/11d33e19066e76c8559857fb780ac9fd1ecf68ac
* "Part 11: Better Testing":http://dailyjs.com/2011/01/31/node-tutorial-11/, source code commit: "6a269ce":https://github.com/alexyoung/nodepad/tree/6a269ce4ddb6c7dc78598b488c93b38828fb5763
* "Part 12: Updating Mongoose":http://dailyjs.com/2011/02/07/node-tutorial-12/, source code commit: "2a8725":https://github.com/alexyoung/nodepad/tree/2a8725f089ef052ec8b4ccfed8f6fbece70a606a
* "Part 13: Stylus":http://dailyjs.com/2011/02/14/node-tutorial-13/, source code commit: "0a70e40":https://github.com/alexyoung/nodepad/tree/0a70e40cafd982c1f2421ecf16caa887fc49ae39
* "Part 14: Email":http://dailyjs.com/2011/02/21/node-tutorial-14/, source code commit: "2e81a7b":https://github.com/alexyoung/nodepad/tree/2e81a7b8a1863db75485e4c49af5753a21266178
* "Part 15: Node Versions, npm Publishing":http://dailyjs.com/2011/02/28/node-tutorial-15/, source code commit: "89abea1":https://github.com/alexyoung/nodepad/tree/89abea12171de333159ef2be89890e9c56eb86af
* "Part 16: Updating to Node 0.4.2 and Express 2":http://dailyjs.com/2011/03/14/node-tutorial-16/, source code commit: "19fbb2":https://github.com/alexyoung/nodepad/tree/19fbb2e15dd2e247397e9d9d1caea3a4800a865e
</div>

h3. Interface Improvements

I've neglected to work on Nodepad's interface for quite a few weeks now.  I'd really like it to have a more usable interface before proceeding on more features.

The areas that need improving are:

* Login form
* Registration form
* Add new document
* Rename document

h3. Forms

I put a class on the registration and login forms and wrote the following Stylus:

{% highlight text %}
form.users
  background-color faded-white
  border 1px solid medium-grey
  float left
  padding 0 10px 10px 10px

form.users div
  padding 10px 0 0 0
  float left
  clear left

form.users label
  width 140px
  float left
  clear right
  color dark-grey
  font-weight bold

form.users input[type=submit]
  margin-left 140px
  clear both
{% endhighlight %}

This just makes the forms feel a bit more substantial and easier to read.  As you can see, I'm using the Stylus variables to keep the colours consistent.

h3. Document Rename

I've added an <code>input</code> field to the document index so documents can be renamed.  The Ajax save code now updates the document title in the left-hand-side navigation when the save returns:

{% highlight javascript %}
$('#save-button').click(function() {
  var id = $('#document-list .selected').itemID(),
      params = { d: { data: $('#editor').val(), id: id, title: $('input.title').val() } };
  $.put('/documents/' + id + '.json', params, function(data) {
    // Saved, will return JSON
    $('#document-title-' + id).html(data.title);
  });
});
{% endhighlight %}

I added some styles to make the title <code>input</code> sit next to the main <code>textarea</code>.  It looks a bit like Apple's iOS Mail fields (no boxes around the fields, just single grey lines).

h3. New Document

I added a new server-side method that just returns document titles: <code>document/titles.json</code>.

When the new document link is pressed (the "+" button), it creates a new document using Ajax, then selects the new one:

{% highlight javascript %}
$('#create-document').click(function(e) {
  $.post('/documents.json', { d: { data: '', title: 'Untitled Document' } }, function(new_doc) {
    $('#document-list').append('<li><a id="document-title-' + new_doc._id + '" href="/documents/' + new_doc._id + '">' + new_doc.title + '</a></li>');
    $('#document-title-' + new_doc._id).click();
  });
  e.preventDefault();
});
{% endhighlight %}

This could be changed to sort the documents as well.

h3. Sorting Documents

A few weeks ago we switched to Mongoose's new API.  The documentation is still a bit lacking, so I'm not convinced that this is the best way to sort documents:

{% highlight javascript %}
app.get('/documents.:format?', loadUser, function(req, res) {
  Document.find({ user_id: req.currentUser.id },
                [], { sort: ['title', 'descending'] },
                function(err, documents) {
{% endhighlight %}

The old API was <code>Document.find().sort()</code> which made more sense to me, but now we have to do it like this.

h3. Buttons

I added some styles to make the buttons feel like they're being pressed:

{% highlight text %}
ul.toolbar a:active
  background-color dark-grey
  color white
{% endhighlight %}

h3. Conclusion

Now Nodepad better to use in Firefox and Chrome/Safari.  It's not quite professional quality yet, and would need more browser testing, but it's closer to something I'd actually want to use.

This week's code is "commit 5c5fb5c":https://github.com/alexyoung/nodepad/tree/5c5fb5c5f5ad296f192dc5ca49c91aa340efe465

