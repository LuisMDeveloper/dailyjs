---
layout: post
title: "Node Tutorial Part 19: Backbone.js"
author: Alex Young
categories: 
- server
- node
- tutorials
- lmawa
- nodepad
---

Welcome to part 19 of _Let's Make a Web App_, a tutorial series about building a web app with "Node":http://nodejs.org/.  This series will walk you through the major areas you'll need to face when building your own applications.  These tutorials are tagged with "lmawa":/tags.html#lmawa.

<a href="#" class="showPrevious">Click to show previous tutorials</a>.

<div class="previous" style="display: none">
* "Part 1: Introduction":http://dailyjs.com/2010/11/01/node-tutorial/ 
* "Part 2: Installation and Skeleton App":http://dailyjs.com/2010/11/08/node-tutorial-2/, source code commit: "4ea936b":https://github.com/alexyoung/nodepad/commit/4ea936b4b426012528fc722c7576391b48d5a0b7
* "Part 3: RESTful Methods and Testing":http://dailyjs.com/2010/11/15/node-tutorial-3/, source code commit: "39e66cb":https://github.com/alexyoung/nodepad/commit/39e66cb9d11a67044495beb0de1934ac4d9c4786
* "Part 4: Templates, Partials, Creating and Editing Documents":http://dailyjs.com/2010/11/22/node-tutorial-4/, source code commit: "f66fdb":https://github.com/alexyoung/nodepad/commit/f66fdb5c3bebdf693f62884ffc06a40b93328bb5
* "Part 5: Authentication, Sessions, Access Control Middleware":http://dailyjs.com/2010/12/06/node-tutorial-5/, source code commit: "03fe9b":https://github.com/alexyoung/nodepad/tree/03fe9b272fea1beb98ffefcf5f7ed226c81c49fd
* "Part 6: Interface Basics":http://dailyjs.com/2010/12/20/node-tutorial-6/, source code commit: "f2261c":https://github.com/alexyoung/nodepad/tree/f2261c510c987b35df1e6e000be6e1e591cd9d6d
* "Part 7: Node Library Versions, Jade Tricks, Error Pages":http://dailyjs.com/2010/12/27/node-tutorial-7/, source code commit: "929f5":https://github.com/alexyoung/nodepad/tree/929f5642ca1b2fa664df517457e056c92490d892
* "Part 8: Flash Messages and Helpers":http://dailyjs.com/2011/01/03/node-tutorial-8/, source code commit: "841a49":https://github.com/alexyoung/nodepad/tree/841a493c03f0421dd1a2279fccac3fbcf1e17b1f
* "Part 9: Remember Me":http://dailyjs.com/2011/01/10/node-tutorial-9/, source code commit: "1904c":https://github.com/alexyoung/nodepad/tree/1904c6b7f95d708474a5d42e8cdfd40e96243a7a
* "Part 10: Markdown":http://dailyjs.com/2011/01/24/node-tutorial-10/, source code commit: "11d33":https://github.com/alexyoung/nodepad/tree/11d33e19066e76c8559857fb780ac9fd1ecf68ac
* "Part 11: Better Testing":http://dailyjs.com/2011/01/31/node-tutorial-11/, source code commit: "6a269ce":https://github.com/alexyoung/nodepad/tree/6a269ce4ddb6c7dc78598b488c93b38828fb5763
* "Part 12: Updating Mongoose":http://dailyjs.com/2011/02/07/node-tutorial-12/, source code commit: "2a8725":https://github.com/alexyoung/nodepad/tree/2a8725f089ef052ec8b4ccfed8f6fbece70a606a
* "Part 13: Stylus":http://dailyjs.com/2011/02/14/node-tutorial-13/, source code commit: "0a70e40":https://github.com/alexyoung/nodepad/tree/0a70e40cafd982c1f2421ecf16caa887fc49ae39
* "Part 14: Email":http://dailyjs.com/2011/02/21/node-tutorial-14/, source code commit: "2e81a7b":https://github.com/alexyoung/nodepad/tree/2e81a7b8a1863db75485e4c49af5753a21266178
* "Part 15: Node Versions, npm Publishing":http://dailyjs.com/2011/02/28/node-tutorial-15/, source code commit: "89abea1":https://github.com/alexyoung/nodepad/tree/89abea12171de333159ef2be89890e9c56eb86af
* "Part 16: Updating to Node 0.4.2 and Express 2":http://dailyjs.com/2011/03/14/node-tutorial-16/, source code commit: "19fbb2":https://github.com/alexyoung/nodepad/tree/19fbb2e15dd2e247397e9d9d1caea3a4800a865e
* "Part 17: UI Improvements":http://dailyjs.com/2011/03/21/node-tutorial-17/, source code commit: "5c5fb5c":https://github.com/alexyoung/nodepad/tree/5c5fb5c5f5ad296f192dc5ca49c91aa340efe465
* "Part 18: Full Text Search":http://dailyjs.com/2011/03/28/node-tutorial-18/, source code commit: "ceb9b32":https://github.com/alexyoung/nodepad/tree/ceb9b32a09dec3a52956bc9c631b68487b34bf23
</div>

h3. Backbone.js

!/images/posts/backbone-logo.png!

"Backbone.js":http://documentcloud.github.com/backbone/ is a library for writing client-side JavaScript.  It provides base classes for models, collections, and views.  If you've ever worked on a project with a library like jQuery and found client-side code becomes unwieldy and hard to navigate, Backbone.js can help!

Nodepad's simple structure means we're mostly interested in Backbone's models, collections, and the persistence layer.  The persistence layer is the part that talks to the server, communicating using JSON.  The views are also useful, however.  As Backbone's documentation says:

bq. It's all too easy to create JavaScript applications that end up as tangled piles of jQuery selectors and callbacks.

To put it simply, a Backbone application uses *models* to interact with data, *collections* to manage sets of models, and *views* to link events to models and generate dynamic HTML based on templates.  The templates are typically hidden HTML, so in our case we'd write stubs in our Jade templates with <code>display: none</code>, then Backbone views would be used to clone and populate these HTML fragments with data.

h3. Planning a Backbone Application

Planning a Backbone application is a bit like planning server-side software -- separate out the data from the views and controllers.

!/images/posts/nodepad-backbone.png!

Our application consists of:

# A document with an ID, title, and body
# A document title row
# A list of titles which can be selected, added to, and deleted

This already sounds like Backbone primitives:

# <code>Backbone.Model</code>, <code>Document</code>: A document with an ID, title, and body
# <code>Backbone.View</code>, <code>DocumentRow</code>: A document title row
# <code>Backbone.View</code>, <code>DocumentList</code>: A list of titles which can be selected, added to, and deleted
# <code>Backbone.Collection</code>, <code>Documents</code>: A collection of documents

h3. Models

Defining models is simple.  Use <code>Backbone.Model.extend</code> to create a new model for your application:

{% highlight javascript %}
var Document = Backbone.Model.extend({
});
{% endhighlight %}

We can't actually do very much with this yet, and there also needs to be a collection of models.  Collections can be reusable or almost like a singleton (for collections that are used once).  In this case we just want one list of documents, so I like to create this type of collection by instantiating a <code>Backbone.Collection</code>:

{% highlight javascript %}
var Documents = new Backbone.Collection();
Documents.url = '/documents/titles.json';
{% endhighlight %}

Each model and collection has a <code>url</code> property -- it can be a function or a string.  Our collection will always use the same URL.  And the reason I'm getting the titles and IDs rather than <code>/documents.json</code> is because we can load the full document on demand.

I usually use functions when I need to use data to construct the URL:

{% highlight javascript %}
var Document = Backbone.Model.extend({
  Collection: Documents,

  url: function() {
    return '/documents/' + this.get('_id') + '.json';
  }
});
{% endhighlight %}

As you can see, when loading a <code>Document</code> the URL will contain our Mongo object's ID.

There's something slightly fiddly still left to do.  While we could use <code>Documents.fetch()</code> to load the titles, the Backbone authors suggest writing it into the template on the server-side to cut down on the extra Ajax request.  We can do this in <code>views/layout.jade</code> like this:

{% highlight text %}
script(type='text/javascript')
  Documents.refresh(!{JSON.stringify(documents)});
{% endhighlight %}

The part that reads <code>!{JSON.stringify(documents)}</code> is actually server-side, and <code>Documents.refresh()</code> just overwrites all of the collection's data in the browser.

h3. Views

The two main views are <code>DocumentRow</code> and <code>DocumentList</code>.  The <code>DocumentRow</code> view requires some Jade changes as well.  It also uses <code>Backbone.View</code>'s <code>events</code> property to watch for clicks on the document titles:

{% highlight javascript %}
var DocumentRow = Backbone.View.extend({
  tagName: 'li',

  events: {
    'click a': 'open'
  },

  template: _.template($('#document-row-template').html()),

  initialize: function() {
    _.bindAll(this, 'render');
  },

  open: function() {
    $('#document-list .selected').removeClass('selected');
    $(this.el).addClass('selected');
    this.model.display();
  },

  render: function() {
    $(this.el).html(this.template({
      id: this.model.id,
      title: this.model.get('title')
    }));
    return this;
  }
});
{% endhighlight %}

The corresponding Jade template looks like this:

{% highlight text %}
ul#document-list
  li#document-row-template(style='display: none')
    a(id='document_{{ "{{ id " }}}}') {{ "{{ title " }}}}
{% endhighlight %}

The <code>document-row-template</code> part will be hidden and used to generate several instances of <code>DocumentRow</code>.  The <code>events</code> property in <code>DocumentRow</code> is Backbone's convention for mapping events to methods.  The left-most part, <code>click</code> is the event, then the rest of the string is used as the selector to observe.  The Underscore method, <code>bindAll</code> is used to make sure <code>this</code> refers to an instance of <code>DocumentRow</code> when <code>render</code> is called from an event.

I'm using the standard Underscore <code>_.template</code> method to insert each document's value:

{% highlight javascript %}
_.templateSettings = {
  interpolate : /\{\{(.+?)\}\}/g
};
{% endhighlight %}

To implement displaying a document it simply populates the form fields:

{% highlight javascript %}
Document = Backbone.Model.extend({
  Collection: Documents,

  url: function() {
    return '/documents/' + this.get('_id') + '.json';
  },

  display: function() {
    this.fetch({
      success: function(model, response) {
        $('#editor-container input.title').val(model.get('title'));
        $('#editor').val(model.get('data'));
      }
    });
  }
});
{% endhighlight %}

h3. Conclusion

I've only scratched the surface of Backbone here, but you can see some of the major components of the library.  When using Backbone with a larger project it may make sense to keep each class in its own file.  In general it can certainly help improve over a monolithic soup of selectors and callbacks.

I'll continue implementing Nodepad's client-side code with Backbone next week.

This week's commit was "8e86240":https://github.com/alexyoung/nodepad/tree/8e8624073cc27fe377d8417159d69a9f3318cc22. 
