---
layout: post
title: "Node Tutorial Part 20: Backbone.js"
author: Alex Young
categories: 
- server
- node
- tutorials
- lmawa
- nodepad
---

Welcome to part 20 of _Let's Make a Web App_, a tutorial series about building a web app with "Node":http://nodejs.org/.  This series will walk you through the major areas you'll need to face when building your own applications.  These tutorials are tagged with "lmawa":/tags.html#lmawa.

<a href="#" class="showPrevious">Click to show previous tutorials</a>.

<div class="previous" style="display: none">
* "Part 1: Introduction":http://dailyjs.com/2010/11/01/node-tutorial/ 
* "Part 2: Installation and Skeleton App":http://dailyjs.com/2010/11/08/node-tutorial-2/, source code commit: "4ea936b":https://github.com/alexyoung/nodepad/commit/4ea936b4b426012528fc722c7576391b48d5a0b7
* "Part 3: RESTful Methods and Testing":http://dailyjs.com/2010/11/15/node-tutorial-3/, source code commit: "39e66cb":https://github.com/alexyoung/nodepad/commit/39e66cb9d11a67044495beb0de1934ac4d9c4786
* "Part 4: Templates, Partials, Creating and Editing Documents":http://dailyjs.com/2010/11/22/node-tutorial-4/, source code commit: "f66fdb":https://github.com/alexyoung/nodepad/commit/f66fdb5c3bebdf693f62884ffc06a40b93328bb5
* "Part 5: Authentication, Sessions, Access Control Middleware":http://dailyjs.com/2010/12/06/node-tutorial-5/, source code commit: "03fe9b":https://github.com/alexyoung/nodepad/tree/03fe9b272fea1beb98ffefcf5f7ed226c81c49fd
* "Part 6: Interface Basics":http://dailyjs.com/2010/12/20/node-tutorial-6/, source code commit: "f2261c":https://github.com/alexyoung/nodepad/tree/f2261c510c987b35df1e6e000be6e1e591cd9d6d
* "Part 7: Node Library Versions, Jade Tricks, Error Pages":http://dailyjs.com/2010/12/27/node-tutorial-7/, source code commit: "929f5":https://github.com/alexyoung/nodepad/tree/929f5642ca1b2fa664df517457e056c92490d892
* "Part 8: Flash Messages and Helpers":http://dailyjs.com/2011/01/03/node-tutorial-8/, source code commit: "841a49":https://github.com/alexyoung/nodepad/tree/841a493c03f0421dd1a2279fccac3fbcf1e17b1f
* "Part 9: Remember Me":http://dailyjs.com/2011/01/10/node-tutorial-9/, source code commit: "1904c":https://github.com/alexyoung/nodepad/tree/1904c6b7f95d708474a5d42e8cdfd40e96243a7a
* "Part 10: Markdown":http://dailyjs.com/2011/01/24/node-tutorial-10/, source code commit: "11d33":https://github.com/alexyoung/nodepad/tree/11d33e19066e76c8559857fb780ac9fd1ecf68ac
* "Part 11: Better Testing":http://dailyjs.com/2011/01/31/node-tutorial-11/, source code commit: "6a269ce":https://github.com/alexyoung/nodepad/tree/6a269ce4ddb6c7dc78598b488c93b38828fb5763
* "Part 12: Updating Mongoose":http://dailyjs.com/2011/02/07/node-tutorial-12/, source code commit: "2a8725":https://github.com/alexyoung/nodepad/tree/2a8725f089ef052ec8b4ccfed8f6fbece70a606a
* "Part 13: Stylus":http://dailyjs.com/2011/02/14/node-tutorial-13/, source code commit: "0a70e40":https://github.com/alexyoung/nodepad/tree/0a70e40cafd982c1f2421ecf16caa887fc49ae39
* "Part 14: Email":http://dailyjs.com/2011/02/21/node-tutorial-14/, source code commit: "2e81a7b":https://github.com/alexyoung/nodepad/tree/2e81a7b8a1863db75485e4c49af5753a21266178
* "Part 15: Node Versions, npm Publishing":http://dailyjs.com/2011/02/28/node-tutorial-15/, source code commit: "89abea1":https://github.com/alexyoung/nodepad/tree/89abea12171de333159ef2be89890e9c56eb86af
* "Part 16: Updating to Node 0.4.2 and Express 2":http://dailyjs.com/2011/03/14/node-tutorial-16/, source code commit: "19fbb2":https://github.com/alexyoung/nodepad/tree/19fbb2e15dd2e247397e9d9d1caea3a4800a865e
* "Part 17: UI Improvements":http://dailyjs.com/2011/03/21/node-tutorial-17/, source code commit: "5c5fb5c":https://github.com/alexyoung/nodepad/tree/5c5fb5c5f5ad296f192dc5ca49c91aa340efe465
* "Part 18: Full Text Search":http://dailyjs.com/2011/03/28/node-tutorial-18/, source code commit: "ceb9b32":https://github.com/alexyoung/nodepad/tree/ceb9b32a09dec3a52956bc9c631b68487b34bf23
* "Part 19: Backbone.js":http://dailyjs.com/2011/04/04/node-tutorial-19/, source code commit: "8e86240":https://github.com/alexyoung/nodepad/tree/8e8624073cc27fe377d8417159d69a9f3318cc22
</div>

h3. Backbone Persistence

I haven't yet hooked up our interface and models to Backbone's persistence layer.  I generally work by relying on <code>model.save(attributes)</code> and <code>model.destroy()</code>.  The <code>save</code> method knows when to create or update based on if the <code>id</code> attribute has been set -- remember this, because prior to this tutorial Nodepad was using <code>_id</code> which confuses Backbone.

The add/remove document toolbar could use a skeleton Backbone view like this:

{% highlight javascript %}
ListToolBar = Backbone.View.extend({
  el: $('#left .toolbar'),

  events: {
    'click #create-document': 'add',
    'click #delete-document': 'remove'
  },

  initialize: function(model) {
    _.bindAll(this, 'add', 'remove');
    this.model = model;
  },

  add: function(e) {
    // TODO: Create a new document
  },

  remove: function(e) {
    e.preventDefault();
    if (confirm('Are you sure you want to delete that document?')) {
      this.model.destroy();
    }
  }
});
{% endhighlight %}

The <code>destroy</code> method will delete documents using a HTTP <code>DELETE</code>, the same way as my previous jQuery implementation.  We actually need to instantiate <code>ListToolBar</code> with a model though, so where should that happen?  I decided to put it in the <code>DocumentRow</code> view:

{% highlight javascript %}
open: function() {
  $('#document-list .selected').removeClass('selected');
  $(this.el).addClass('selected');
  this.model.display();
  this.toolbar = new ListToolBar(this.model);
}
{% endhighlight %}

Every time a document is selected, a toolbar will be instantiated.  Now there's a relationship between the toolbar view and the current document.

We still need to create a new document when the <strong>+</strong> button is pressed... This is basically a case of instantiating a document and calling save:

{% highlight javascript %}
add: function(e) {
  e.preventDefault();
  var d = new Document({ title: 'Untitled Document', data: '' });
  d.save();

  // Add it to the collection
  Documents.add(d);

  // addDocument is a new method I've added to DocumentList which just appends
  // the right elements to the unordered list
  appView.documentList.addDocument(d);

  // Trigger an open
  d.rowView.open();
}
{% endhighlight %}

There's some housekeeping going on there, but notice that we basically just call <code>save</code> to make Backbone do all the boring Ajax work for us.

h3. <code>DocumentControls</code>

I've also added a view called <code>DocumentControls</code> which manages updating documents.  By now nothing in this should really surprise you:

{% highlight javascript %}
DocumentControls = Backbone.View.extend({
  el: $('#controls'),

  events: {
    'click #save-button': 'save'
  },

  initialize: function(model) {
    _.bindAll(this, 'save', 'showHTML');
    this.model = model;
  },

  save: function(e) {
    this.model.set({
      title: $('input.title').val(),
      data: $('#editor').val()
    });
    
    this.model.save();
    this.model.rowView.render();
    e.preventDefault();
  },

  showHTML: function(e) {
    e.preventDefault();
    // TODO
  }
});
{% endhighlight %}

The line that reads <code>this.model.rowView.render()</code> is just triggering the <code>DocumentRow</code> to update its contents.  For clarity, it reads like this:

{% highlight javascript %}
render: function() {
  $(this.el).html(this.template({
    id: this.model.id,
    title: this.model.get('title')
  }));
  return this;
}
{% endhighlight %}

h3. Conclusion

I hope it's now clear that working with Backbone and REST APIs can be less work than a mess of Ajax calls and CSS selectors.

This week's code was "commit 7d5cc3d":https://github.com/alexyoung/nodepad/tree/7d5cc3d4631efee86719e35522f514dbc302c193.
