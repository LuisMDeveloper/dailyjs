---
layout: post
title: "Node Tutorial Part 6"
author: Alex Young
categories: 
- server
- node
- tutorials
- lmawa
- nodepad
---

Welcome to part 6 of _Let's Make a Web App_, a tutorial series about building a web app with "Node":http://nodejs.org/.  This series will walk you through the major areas you'll need to face when building your own applications.  These tutorials are tagged with "lmawa":/tags.html#lmawa.

Previous tutorials:

* "Part 1: Introduction":http://dailyjs.com/2010/11/01/node-tutorial/ 
* "Part 2: Installation and Skeleton App":http://dailyjs.com/2010/11/08/node-tutorial-2/, source code commit: "4ea936b":https://github.com/alexyoung/nodepad/commit/4ea936b4b426012528fc722c7576391b48d5a0b7
* "Part 3: RESTful Methods and Testing":http://dailyjs.com/2010/11/15/node-tutorial-3/, source code commit: "39e66cb":https://github.com/alexyoung/nodepad/commit/39e66cb9d11a67044495beb0de1934ac4d9c4786
* "Part 4: Templates, Partials, Creating and Editing Documents":http://dailyjs.com/2010/11/22/node-tutorial-4/, source code commit: "f66fdb":https://github.com/alexyoung/nodepad/commit/f66fdb5c3bebdf693f62884ffc06a40b93328bb5
* "Part 5: Authentication, Sessions, Access Control Middleware":http://dailyjs.com/2010/12/06/node-tutorial-5/, source code commit: "03fe9b":https://github.com/alexyoung/nodepad/tree/03fe9b272fea1beb98ffefcf5f7ed226c81c49fd

Before starting this tutorial remember to start up a mongo daemon if your computer doesn't run one automatically.

In the last part we looked at authentication and sessions.  We used the particularly cool concept of _middleware_ to build some seamless access control.  This week I'm going to demonstrate how to make the interface more interesting using jQuery.

h3. Interface Design

When I design interfaces I usually plan out a rough idea before developing the app.  This is usually known as top-down design.  Once the interface seems workable, I move on to develop the API with a simple interface and tests, just like we've been doing so far in this tutorial series.

I like to sketch out interfaces with graph paper, a mechanical pencil, and a good eraser.  I keep the sketches rough so my colleagues know they're not finished designs, they're ideas that will evolve as we discuss the project.

!/images/posts/nodepad-sketch.jpg!

A simple sketch of Nodepad suggested the following:

* The interface could use two panels like a desktop app, one for the list of notes and the other for the note body
* A save button could appear at the bottom, but an auto-save feature would be nice too
* Single-clicking a note loads it, double-click allows the title to be edited
* We need account settings for email/password change
* Editing could work with XMLHttpRequest, because we already have JSON support

h3. Cheating

One of the most important things when building interfaces is to cheat as much as possible.  When I'm programming I don't spend hours working on code that's already available in a well-written library, and the same can be said for design.  I don't need to draw every icon I need, and I don't need to reinvent the wheel for layouts either.

Today there are a lot of solutions available, from CSS frameworks to GUI-heavy projects like "Cappuccino":http://cappuccino.org/.  For Nodepad we're going to use "jQuery UI":http://jqueryui.com/ which sits in the middle.  It gives us a lot of bang for buck when combined with a solid theme.

For the theme, I've decided to use "Aristo":http://taitems.tumblr.com/post/482577430/introducing-aristo-a-jquery-ui-theme ("demo":http://www.warfuric.com/taitems/demo.html).  It's not necessarily the best theme out there, but I've got a lot of experience using it and I think it looks great.

h3. Including Aristo and jQuery UI

I've downloaded "Aristo from GitHub":https://github.com/taitems/Aristo-jQuery-UI-Theme and put it in <code>public/stylesheets/aristo</code>.  Then we just need to load jQuery UI and the new stylesheet in the <code>views/layout.jade</code> template:

{% highlight javascript %}
link(rel='stylesheet', href='/stylesheets/aristo/jquery-ui-1.8.5.custom.css')
script(type='text/javascript', src='https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.7/jquery-ui.min.js')
{% endhighlight %}

h3. Page Structure

Our interface needs two columns, a header, a document body for editing, and some buttons for document management.  In Jade it might look like this:

{% highlight javascript %}
div(class='outline-view', id='left')
  div(id='DocumentTitles')
    ul(id='document-list')
      - for (var d in documents)
        li
          a(id='document-title-' + documents[d].id, href='/documents/' + documents[d].id)
            =documents[d].title

  ul(class='toolbar')
    li
      a(href='/documents/new')
        +
    li
      a(href='#', id='delete-document')
        -

div(class='content-divider')

div(class='content')
  div(id='editor-container')
    textarea(name='d[data]', id='editor')
      =d.data || ''

ul(id='controls',class='toolbar')
  li
    a(href='#', id='save-button') Save
{% endhighlight %}

The first part, <code>outline-view</code> is a div that contains the document list.  This is the code we've seen before.  I've positioned these with <code>absolute</code> and I'm using some JavaScript on <code>resize</code> and <code>focus</code> to resize the document list and button toolbars.

The selected document is displayed using some CSS gradients:

{% highlight css %}
.outline-view ul .selected {
  color: #fff;
  background-color: #8897ba;
  background: -webkit-gradient(linear, left top, left bottom, from(#b2bed7), to(#8897ba));
  background: -moz-linear-gradient(top,  #b2bed7,  #8897ba);
}
{% endhighlight %}

It doesn't matter if browsers don't support CSS3 gradients, it'll look fine with just the darker colour.

h3. Selecting Documents

Recall that our API requires <code>.json</code> to be appended to the URL to get JSON data back.  We just need some simple jQuery event handling to load the document from the server:

{% highlight javascript %}
$('#document-list li a').live('click', function(e) {
  var li = $(this);

  $.get(this.href + '.json', function(data) {
    $('#document-list .selected').removeClass('selected');
    li.addClass('selected');
    $('#editor').val(data.data);
    $('#editor').focus();
  });

  e.preventDefault();
});
{% endhighlight %}

This binds a click handler that will fire whenever a document title is clicked.  It fills out the <code>textarea</code> with the <code>data</code> value from the JSON response.  Rather than a normal event, <code>live</code> is used to set up a delegate in case the document list changes.

h3. Saving Documents

Something I like to do when creating dynamic interfaces is to set id attributes based on database IDs, using a simple naming convention.  In Nodepad I've used DOM ids like this: _document-844ce17994ba1b87d359000001_.  To retrieve the database ID we just need to get the last part, which is easy if we split on the hyphens.

Once that convention is established, we can use a mini jQuery plugin to extract item IDs:

{% highlight javascript %}
$.fn.itemID = function() {
  try {
    var items = $(this).attr('id').split('-');
    return items[items.length - 1];
  } catch (exception) {
    return null;
  }
};
{% endhighlight %}

This makes saving documents when the save button is pressed straightforward enough:

{% highlight javascript %}
$('#save-button').click(function() {
  var id = $('#document-list .selected').itemID(),
      params = { d: { data: $('#editor').val(), id: id } };
  $.put('/documents/' + id + '.json', params, function(data) {
    // Saved, will return JSON
  });

{% endhighlight %}

There isn't actually a HTTP verb for _put_ in jQuery, so I defined one:

{% highlight javascript %}
$.put = function(url, data, success) {
  data._method = 'PUT';
  $.post(url, data, success, 'json');
};
{% endhighlight %}

h3. Progress

!/images/posts/nodepad-progress.png!

We haven't actually used any jQuery UI so far, but we'll get to that in the next part.  So far we've got a simple little editor that's starting to look like something more friendly and usable.

I haven't had time to browser test yet, so stick to WebKit or Firefox.

The latest Nodepad commit was "3e01054":https://github.com/alexyoung/nodepad/tree/3e010544717a8a0cc384d834f531d241ade579b7.

