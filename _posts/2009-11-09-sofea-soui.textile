---
layout: post
title: What happened to SOFEA/SOUI?
author: Justin Knowlden
categories: 
- methodologies
- JSON
---
The concept of "SOFEA":http://wisdomofganesh.googlegroups.com/web/Life+above+the+Service+Tier+v1_1.pdf?gda=QvPUumAAAADP8jjME6tUvLP_S7C-aFm7BOCPUpqQfu0BtRm4TfOwCj195rPZqw_-mJamPCC01-dnMrcQAAjJt0hRUastxrEhZDGta7uEsApRcnlXeG-8bG3FU91bWBii3KPv5fvAM40 (Service-Oriented Front-End Architecture) is not new, but it's also not something that I hear a lot of talk about. It is something that happens to very interesting to me and has been for quite some time. SOFEA's "doppelgänger":http://en.wikipedia.org/wiki/Doppelgänger is known as "SOUI":http://www.appcelerant.com/mvc_is_dead.html (Service Oriented User Interface). It is very common to see both terms listed together and the reason is that both were defined at roughly the same period of time (circa 2007), though there is "some":http://wisdomofganesh.blogspot.com/2007/11/sofea-and-soui-there-is-difference.html "contention":http://raibledesigns.com/rd/entry/sofea_also_known_as_soui over which came first. More importantly, both essentially want the same thing: make services act more like services regardless of the consumer.

Anyways, for me the differences between the two proposals are not all that important. What I took away from my initial encounter with the general approach is that of responsibility. At that time, I had a growing internal conflict with asking the application server (Rails, Django, etc.) to also concern itself with generating everything necessary for presenting business information. SOFEA/SOUI gave a name to my "psychosis" and suggested an alternative: a) worry about how to present the information in the actual client itself and b) "talk" to the application server by sending and receiving only the essential nuggets of information.

There are some possible contradictions that present themselves - such as violating the principles of "unobtrusive JavaScript":http://en.wikipedia.org/wiki/Unobtrusive_JavaScript - but I still think we ought to be talking a lot more about this approach and JavaScript has a large part to play in making it possible. Frameworks like "Sammy":/2009/11/05/sammy/ and "Jaml":/2009/11/09/jaml-javascript-html-generation/ (for instance) are a step along this path. We owe it to ourselves to try and push this technology forward and to ease the burdens of our passions, allowing us more time to focus on the things that are more important; or at least those that are more interesting.

