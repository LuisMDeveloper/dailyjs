---
layout: post
title: "Node Tutorial Part 21: Connection Management"
author: Alex Young
categories: 
- server
- node
- tutorials
- lmawa
- nodepad
---

Welcome to part 21 of _Let's Make a Web App_, a tutorial series about building a web app with "Node":http://nodejs.org/.  This series will walk you through the major areas you'll need to face when building your own applications.  These tutorials are tagged with "lmawa":/tags.html#lmawa.

<a href="#" class="showPrevious">Click to show previous tutorials</a>.

<div class="previous" style="display: none">
* "Part 1: Introduction":http://dailyjs.com/2010/11/01/node-tutorial/ 
* "Part 2: Installation and Skeleton App":http://dailyjs.com/2010/11/08/node-tutorial-2/, source code commit: "4ea936b":https://github.com/alexyoung/nodepad/commit/4ea936b4b426012528fc722c7576391b48d5a0b7
* "Part 3: RESTful Methods and Testing":http://dailyjs.com/2010/11/15/node-tutorial-3/, source code commit: "39e66cb":https://github.com/alexyoung/nodepad/commit/39e66cb9d11a67044495beb0de1934ac4d9c4786
* "Part 4: Templates, Partials, Creating and Editing Documents":http://dailyjs.com/2010/11/22/node-tutorial-4/, source code commit: "f66fdb":https://github.com/alexyoung/nodepad/commit/f66fdb5c3bebdf693f62884ffc06a40b93328bb5
* "Part 5: Authentication, Sessions, Access Control Middleware":http://dailyjs.com/2010/12/06/node-tutorial-5/, source code commit: "03fe9b":https://github.com/alexyoung/nodepad/tree/03fe9b272fea1beb98ffefcf5f7ed226c81c49fd
* "Part 6: Interface Basics":http://dailyjs.com/2010/12/20/node-tutorial-6/, source code commit: "f2261c":https://github.com/alexyoung/nodepad/tree/f2261c510c987b35df1e6e000be6e1e591cd9d6d
* "Part 7: Node Library Versions, Jade Tricks, Error Pages":http://dailyjs.com/2010/12/27/node-tutorial-7/, source code commit: "929f5":https://github.com/alexyoung/nodepad/tree/929f5642ca1b2fa664df517457e056c92490d892
* "Part 8: Flash Messages and Helpers":http://dailyjs.com/2011/01/03/node-tutorial-8/, source code commit: "841a49":https://github.com/alexyoung/nodepad/tree/841a493c03f0421dd1a2279fccac3fbcf1e17b1f
* "Part 9: Remember Me":http://dailyjs.com/2011/01/10/node-tutorial-9/, source code commit: "1904c":https://github.com/alexyoung/nodepad/tree/1904c6b7f95d708474a5d42e8cdfd40e96243a7a
* "Part 10: Markdown":http://dailyjs.com/2011/01/24/node-tutorial-10/, source code commit: "11d33":https://github.com/alexyoung/nodepad/tree/11d33e19066e76c8559857fb780ac9fd1ecf68ac
* "Part 11: Better Testing":http://dailyjs.com/2011/01/31/node-tutorial-11/, source code commit: "6a269ce":https://github.com/alexyoung/nodepad/tree/6a269ce4ddb6c7dc78598b488c93b38828fb5763
* "Part 12: Updating Mongoose":http://dailyjs.com/2011/02/07/node-tutorial-12/, source code commit: "2a8725":https://github.com/alexyoung/nodepad/tree/2a8725f089ef052ec8b4ccfed8f6fbece70a606a
* "Part 13: Stylus":http://dailyjs.com/2011/02/14/node-tutorial-13/, source code commit: "0a70e40":https://github.com/alexyoung/nodepad/tree/0a70e40cafd982c1f2421ecf16caa887fc49ae39
* "Part 14: Email":http://dailyjs.com/2011/02/21/node-tutorial-14/, source code commit: "2e81a7b":https://github.com/alexyoung/nodepad/tree/2e81a7b8a1863db75485e4c49af5753a21266178
* "Part 15: Node Versions, npm Publishing":http://dailyjs.com/2011/02/28/node-tutorial-15/, source code commit: "89abea1":https://github.com/alexyoung/nodepad/tree/89abea12171de333159ef2be89890e9c56eb86af
* "Part 16: Updating to Node 0.4.2 and Express 2":http://dailyjs.com/2011/03/14/node-tutorial-16/, source code commit: "19fbb2":https://github.com/alexyoung/nodepad/tree/19fbb2e15dd2e247397e9d9d1caea3a4800a865e
* "Part 17: UI Improvements":http://dailyjs.com/2011/03/21/node-tutorial-17/, source code commit: "5c5fb5c":https://github.com/alexyoung/nodepad/tree/5c5fb5c5f5ad296f192dc5ca49c91aa340efe465
* "Part 18: Full Text Search":http://dailyjs.com/2011/03/28/node-tutorial-18/, source code commit: "ceb9b32":https://github.com/alexyoung/nodepad/tree/ceb9b32a09dec3a52956bc9c631b68487b34bf23
* "Part 19: Backbone.js":http://dailyjs.com/2011/04/04/node-tutorial-19/, source code commit: "8e86240":https://github.com/alexyoung/nodepad/tree/8e8624073cc27fe377d8417159d69a9f3318cc22
* "Part 20: Backbone.js Persistence":http://dailyjs.com/2011/04/11/node-tutorial-20/, source code commit: "7d5cc3d":https://github.com/alexyoung/nodepad/tree/7d5cc3d4631efee86719e35522f514dbc302c193
</div>

h3. Package Updates

I've updated all the packages to the latest versions.  Express is now on 2.2.2!

h3. HTML Preview

!/images/posts/nodepad-html.png!

In the Backbone.js tutorials we already added a stub to <code>DocumentControls</code> called <code>showHTML</code>.  This is meant to show the HTML preview, which can be obtained by viewing a document with <code>.html</code> appended to the URL.  I added a convenience function to the model for getting the right URL:

{% highlight javascript %}
  Document = Backbone.Model.extend({
    Collection: Documents,

    url: function() {
      return this.urlWithFormat('json');
    },

    urlWithFormat: function(format) {
      return this.get('id') ? '/documents/' + this.get('id') + '.' + format : '/documents.json';
    },

    // ...
{% endhighlight %}

Then added the event <code>'click #html-button': 'showHTML'</code> to <code>DocumentControls</code> and updated <code>showHTML</code>:

{% highlight javascript %}
showHTML: function(e) {
  var model = this.model;
  e.preventDefault();
  $.get(this.model.urlWithFormat('html'), function(data) {
    console.log($(window).height());
    $('#html-container').html(data);
    $('#html-container').dialog({
      title: model.get('title'),
      autoOpen: true,
      modal: true,
      width: $(window).width() * 0.95,
      height: $(window).height() * 0.90
    });
  });
}
{% endhighlight %}

I'm using <code>dialog</code> from jQuery UI to display the contents of the HTML document.

h3. Express Responses

It was possible to make some of my server-side methods hang, like this one:

{% highlight javascript %}
app.post('/search.:format?', loadUser, function(req, res) {
  Document.find({ user_id: req.currentUser.id, keywords: req.body.s ? req.body.s : null },
                [], { sort: ['title', 'descending'] },
                function(err, documents) {
    switch (req.params.format) {
      case 'json':
        res.send(documents.map(function(d) {
          return { title: d.title, id: d._id };
        }));
      break;
    }
  });
});
{% endhighlight %}

This is poor style because an unrecognised format would cause the app to hang.  You should avoid this as much as possible when building Express apps and always send something back to the browser:

{% highlight javascript %}
app.post('/search.:format?', loadUser, function(req, res) {
  Document.find({ user_id: req.currentUser.id, keywords: req.body.s ? req.body.s : null },
                [], { sort: ['title', 'descending'] },
                function(err, documents) {
    switch (req.params.format) {
      case 'json':
        res.send(documents.map(function(d) {
          return { title: d.title, id: d._id };
        }));
      break;

      // Here
      default:
        res.send('Format not available', 400);
      break;
    }
  });
});
{% endhighlight %}

TJ Holowaychuk pointed this out to me in the comments.

I'm not sure if a 400 _Bad Request_ is the best way to respond though.  What about 406 Not Acceptable?  I'm sure there's a standard convention, but I read through part of "rfc2616":http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html and couldn't decide.

An additional way to safeguard against hung connections is by using middleware to disconnect them after a period of time.  The "Connect-timeout":https://github.com/LearnBoost/connect-timeout middleware by Guillermo Rauch could be used to do this.  Long-running connections are still allowed with this middleware by using the <code>clearTimeout</code> method which gets added to the request objects.

It's fairly easy to use:

{% highlight javascript %}
var connectTimeout = require('connect-timeout@0.0.1'),
    // ...

app.configure(function() {
  app.use(connectTimeout({ time: 10000 }));
  // ...
{% endhighlight %}

There are options for error code and time.

This week's code is "commit 2fde220":https://github.com/alexyoung/nodepad/tree/2fde2201b663d01ade803c8d76c66e329d6acef5.

