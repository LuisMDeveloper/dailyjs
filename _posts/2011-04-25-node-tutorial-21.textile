---
layout: post
title: "Node Tutorial Part 22: Backbone (Again)"
author: Alex Young
categories: 
- server
- node
- tutorials
- lmawa
- nodepad
- backbone.js
---

Welcome to part 22 of _Let's Make a Web App_, a tutorial series about building a web app with "Node":http://nodejs.org/.  This series will walk you through the major areas you'll need to face when building your own applications.  These tutorials are tagged with "lmawa":/tags.html#lmawa.

<a href="#" class="showPrevious">Click to show previous tutorials</a>.

<div class="previous" style="display: none">
* "Part 1: Introduction":http://dailyjs.com/2010/11/01/node-tutorial/ 
* "Part 2: Installation and Skeleton App":http://dailyjs.com/2010/11/08/node-tutorial-2/, source code commit: "4ea936b":https://github.com/alexyoung/nodepad/commit/4ea936b4b426012528fc722c7576391b48d5a0b7
* "Part 3: RESTful Methods and Testing":http://dailyjs.com/2010/11/15/node-tutorial-3/, source code commit: "39e66cb":https://github.com/alexyoung/nodepad/commit/39e66cb9d11a67044495beb0de1934ac4d9c4786
* "Part 4: Templates, Partials, Creating and Editing Documents":http://dailyjs.com/2010/11/22/node-tutorial-4/, source code commit: "f66fdb":https://github.com/alexyoung/nodepad/commit/f66fdb5c3bebdf693f62884ffc06a40b93328bb5
* "Part 5: Authentication, Sessions, Access Control Middleware":http://dailyjs.com/2010/12/06/node-tutorial-5/, source code commit: "03fe9b":https://github.com/alexyoung/nodepad/tree/03fe9b272fea1beb98ffefcf5f7ed226c81c49fd
* "Part 6: Interface Basics":http://dailyjs.com/2010/12/20/node-tutorial-6/, source code commit: "f2261c":https://github.com/alexyoung/nodepad/tree/f2261c510c987b35df1e6e000be6e1e591cd9d6d
* "Part 7: Node Library Versions, Jade Tricks, Error Pages":http://dailyjs.com/2010/12/27/node-tutorial-7/, source code commit: "929f5":https://github.com/alexyoung/nodepad/tree/929f5642ca1b2fa664df517457e056c92490d892
* "Part 8: Flash Messages and Helpers":http://dailyjs.com/2011/01/03/node-tutorial-8/, source code commit: "841a49":https://github.com/alexyoung/nodepad/tree/841a493c03f0421dd1a2279fccac3fbcf1e17b1f
* "Part 9: Remember Me":http://dailyjs.com/2011/01/10/node-tutorial-9/, source code commit: "1904c":https://github.com/alexyoung/nodepad/tree/1904c6b7f95d708474a5d42e8cdfd40e96243a7a
* "Part 10: Markdown":http://dailyjs.com/2011/01/24/node-tutorial-10/, source code commit: "11d33":https://github.com/alexyoung/nodepad/tree/11d33e19066e76c8559857fb780ac9fd1ecf68ac
* "Part 11: Better Testing":http://dailyjs.com/2011/01/31/node-tutorial-11/, source code commit: "6a269ce":https://github.com/alexyoung/nodepad/tree/6a269ce4ddb6c7dc78598b488c93b38828fb5763
* "Part 12: Updating Mongoose":http://dailyjs.com/2011/02/07/node-tutorial-12/, source code commit: "2a8725":https://github.com/alexyoung/nodepad/tree/2a8725f089ef052ec8b4ccfed8f6fbece70a606a
* "Part 13: Stylus":http://dailyjs.com/2011/02/14/node-tutorial-13/, source code commit: "0a70e40":https://github.com/alexyoung/nodepad/tree/0a70e40cafd982c1f2421ecf16caa887fc49ae39
* "Part 14: Email":http://dailyjs.com/2011/02/21/node-tutorial-14/, source code commit: "2e81a7b":https://github.com/alexyoung/nodepad/tree/2e81a7b8a1863db75485e4c49af5753a21266178
* "Part 15: Node Versions, npm Publishing":http://dailyjs.com/2011/02/28/node-tutorial-15/, source code commit: "89abea1":https://github.com/alexyoung/nodepad/tree/89abea12171de333159ef2be89890e9c56eb86af
* "Part 16: Updating to Node 0.4.2 and Express 2":http://dailyjs.com/2011/03/14/node-tutorial-16/, source code commit: "19fbb2":https://github.com/alexyoung/nodepad/tree/19fbb2e15dd2e247397e9d9d1caea3a4800a865e
* "Part 17: UI Improvements":http://dailyjs.com/2011/03/21/node-tutorial-17/, source code commit: "5c5fb5c":https://github.com/alexyoung/nodepad/tree/5c5fb5c5f5ad296f192dc5ca49c91aa340efe465
* "Part 18: Full Text Search":http://dailyjs.com/2011/03/28/node-tutorial-18/, source code commit: "ceb9b32":https://github.com/alexyoung/nodepad/tree/ceb9b32a09dec3a52956bc9c631b68487b34bf23
* "Part 19: Backbone.js":http://dailyjs.com/2011/04/04/node-tutorial-19/, source code commit: "8e86240":https://github.com/alexyoung/nodepad/tree/8e8624073cc27fe377d8417159d69a9f3318cc22
* "Part 20: Backbone.js Persistence":http://dailyjs.com/2011/04/11/node-tutorial-20/, source code commit: "7d5cc3d":https://github.com/alexyoung/nodepad/tree/7d5cc3d4631efee86719e35522f514dbc302c193
* "Part 21: Connection Management":http://dailyjs.com/2011/04/18/node-tutorial-21/, source code commit: "2fde220":https://github.com/alexyoung/nodepad/tree/2fde2201b663d01ade803c8d76c66e329d6acef5
</div>

h3. Search

I hadn't finished rebuilding the search interface using Backbone.  The old code used simple jQuery events and Ajax to manage the search field, form submission, and document list.  The search text input management looked like this:

{% highlight javascript %}
$('input[name="s"]').focus(function() {
  var element = $(this);
  if (element.val() === 'Search')
    element.val('');
});

$('input[name="s"]').blur(function() {
  var element = $(this);
  if (element.val().length === 0)
    element.val('Search');
});
{% endhighlight %}

This translates quite easily to Backbone using a view and some events:

{% highlight javascript %}
var SearchView = Backbone.View.extend({
  el: $('#header .search'),

  events: {
    'focus input[name="s"]': 'focus',
    'blur input[name="s"]': 'blur'
  },

  focus: function(e) {
    var element = $(e.currentTarget);
    if (element.val() === 'Search')
      element.val('');
  },

  blur: function(e) {
    var element = $(e.currentTarget);
    if (element.val().length === 0)
      element.val('Search');
  }
}
{% endhighlight %}

The view's main element is the search form, and the <code>focus</code> and <code>blur</code> events are bound in a similar way to the old code.

Next I instantiate the class in <code>AppView</code>, which acts as a main container view:

{% highlight javascript %}
AppView = Backbone.View.extend({
  initialize: function() {
    this.documentList = new DocumentList();
    this.searchView = new SearchView();
  }
});
{% endhighlight %}

h3. Working With <code>DocumentList</code>

!/images/posts/np24.png!

The existing <code>DocumentList</code> manages the left-hand-side list of documents, which the search code needs to work with.  Using the old code could have confused things a little bit here, because it altered the raw HTML rather than working through Backbone.

This is the perfect place for the _Show All_ link that appears when a search is active:

{% highlight javascript %}
DocumentList = Backbone.View.extend({
  el: $('#document-list'),
  Collection: Documents,

  // This supports the search system:
  events: {
    'click #show-all': 'showAll',
  },

  initialize: function() {
    _.bindAll(this, 'render', 'addDocument', 'showAll');
    this.Collection.bind('refresh', this.render);
  },
  
  // ...

  showAll: function(e) {
    e.preventDefault();
    this.el.html('');
    this.Collection.fetch();
    appView.searchView.reset();
  }
{% endhighlight %}

This code is mostly the same, but it adds the <code>showAll</code> method and event binding.  Using <code>this.Collection.fetch</code> will reload all the documents from the server.

As an aside: I was looking at a way of making this work with a subclassed version of the <code>DocumentList</code> collection that uses <code>/search.json</code> instead of the usual document list URL, but I couldn't find a way of making Backbone <code>POST</code> with a request parameter.

h3. Searching

To actually search, I've used the original jQuery Ajax call:

{% highlight javascript %}
SearchView = Backbone.View.extend({
  el: $('#header .search'),

  events: {
    'focus input[name="s"]': 'focus',
    'blur input[name="s"]': 'blur',
    'submit': 'submit'
  },

  initialize: function(model) {
    _.bindAll(this, 'search', 'reset');
  },

  focus: function(e) {
    var element = $(e.currentTarget);
    if (element.val() === 'Search')
      element.val('');
  },

  blur: function(e) {
    var element = $(e.currentTarget);
    if (element.val().length === 0)
      element.val('Search');
  },

  submit: function(e) {
    e.preventDefault();
    this.search($('input[name="s"]').val());
  },

  reset: function() {
    this.el.find("input[name='s']").val('Search');
  },

  search: function(value) {
    $.post('/search.json', { s: value }, function(results) {
      appView.documentList.el.html('<li><a id="show-all" href="#">Show All</a></li>');

      if (results.length === 0) {
        alert('No results found');
      } else {
        for (var i = 0; i < results.length; i++) {
          var d = new Document(results[i]);
          appView.documentList.addDocument(d);
        }
      }
    }, 'json');
  }
});
{% endhighlight %}

I've also added the <code>reset</code> method which sets the search input to _Search_ after pressing _Show All_.

Notice that <code>DocumentList.addDocument</code> is reused here.  In a larger application, this kind of reuse is very important and is where Backbone starts to show its value.  Another thing to note is <code>SearchView</code> could easily be in its own file, allowing us to avoid a monolithic client-side JavaScript file that becomes hard to manage.

h3. Conclusion

Writing good code with client-side frameworks like Backbone requires a lot of work, but it does take away some of the drudgery when working with data and binding it to interfaces.  The search code looks cleaner than it did before, but even though it's quite simple it would be interesting to refactor it.

This week's commit was "2b8e083":https://github.com/alexyoung/nodepad/tree/2b8e083a889e3d7b32a81e04689385101e0780f9.
