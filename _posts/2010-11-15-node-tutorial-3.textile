---
layout: post
title: "Node Tutorial Part 3"
author: Alex Young
categories: 
- server
- node
- tutorials
- lmawa
- nodepad
---

Welcome to part 3 of _Let's Make a Web App_, a tutorial series about building a web app with "Node":http://nodejs.org/.  This series will walk you through the major areas you'll need to face when building your own applications.  These tutorials are tagged with "lmawa":/tags.html#lmawa.

Previous tutorials:

* "Part 1: Introduction":http://dailyjs.com/2010/11/01/node-tutorial/ 
* "Part 2: Installation and Skeleton App":http://dailyjs.com/2010/11/08/node-tutorial-2/, source code commit: "4ea936b4b426012528fc":https://github.com/alexyoung/nodepad/commit/4ea936b4b426012528fc722c7576391b48d5a0b7

In this part we will build on last week's skeleton app.  I already added a simple <code>Document</code> model, so let's flesh that out a bit.  These tutorials expect you to check out the code from the git repository, so visit "nodepad":https://github.com/alexyoung/nodepad to get it.

h3. Logging

Let's add some logging.  Express has a logger, and it can be configured in the <code>app.configure</code> block.  Just make sure you <code>use</code> it:

{% highlight javascript %}
app.configure(function() {
  app.use(express.logger());
  // Last week's configure options go here
});
{% endhighlight %}

It's usually a good idea to configure logging slightly differently, depending on environment.  I've set it up the same way for now:

{% highlight javascript %}
app.configure('development', function() {
  app.use(express.logger());
  app.use(express.errorHandler({ dumpExceptions: true, showStack: true })); 
});

app.configure('production', function() {
  app.use(express.logger());
  app.use(express.errorHandler()); 
});
{% endhighlight %}

h3. API

We can model accessing documents over HTTP using a CRUD-based (Create, Read, Update and Delete) RESTful API:

* <code>GET /documents</code> - Index method that returns a document list
* <code>POST /documents/</code> - Create a new document
* <code>GET /documents/:id</code> - Returns a document
* <code>PUT /documents/:id</code> - Update a document
* <code>DELETE /documents/:id</code> - Delete a document

The HTTP verbs are important -- notice that the index and create methods have the same URL, but respond differently depending on whether a HTTP <code>GET</code> or <code>PUT</code> is used.  Express will route these to the appropriate methods.

h3. HTTP Verbs are Significant

If you're not used to working this way just remember that the HTTP verb is significant.  For example, last week we defined this method:

{% highlight javascript %}
app.get('/', function(req, res) {
  // Respond to GET for '/'
  // ...
});
{% endhighlight %}

If you write a form that posts to the same URL, Express will return an error because no route has been set up.

Also recall from last week that we added <code>express.methodOverride</code> to the configuration options.  The reason for this was we can't rely on browsers understanding HTTP verbs like <code>DELETE</code>, but we can use a convention to get around the problem -- forms can use hidden variables that Express can interpret as a "real" HTTP method.

In some ways this approach to RESTful HTTP APIs might seem inelegant, but the advantage of using these conventions is a lot of web applications fit this approach.

h3. CRUD Stub Reference

For reference, this is what a stubbed out CRUD set of routes looks like:

{% highlight javascript %}
// List
app.get('/documents.:format', function(req, res) {
});

// Create 
app.post('/documents.:format?', function(req, res) {
});

// Read
app.get('/documents/:id.:format?', function(req, res) {
});

// Update
app.put('/documents/:id.:format?', function(req, res) {
});

// Delete
app.del('/documents/:id.:format?', function(req, res) {
});
{% endhighlight %}

Notice that Express uses <code>del</code> instead of _delete_.

h3. Asynchronous Databases

Before we start writing each REST method, let's look at an example: loading a list of documents.  You're probably used to working like this:

{% highlight javascript %}
app.get('/documents', function(req, res) {
  var documents = Document.find().all();

  // Send the result as JSON
  res.send(documents);
{% endhighlight %}

We generally use database libraries asynchronously in Node.  That means we need to do this:

{% highlight javascript %}
app.get('/documents', function(req, res) {
  Document.find().all(function(documents) {
    // 'documents' will contain all of the documents returned by the query
    res.send(documents.map(function(d) {
      // Return a useful representation of the object that res.send() can send as JSON
      return d.__doc;
    }));
  });
});
{% endhighlight %}

The difference is a callback is used to access the results.  This example isn't particularly efficient, because it loads every single document into an array -- it may be better to stream the results to the client as they become available.

h3. Formats

I'd like to support HTML and JSON, where appropriate.  The following pattern could be used:

{% highlight javascript %}
// :format can be json or html
app.get('/documents.:format?', function(req, res) {
  // Some kind of Mongo query/update
  Document.find().all(function(documents) {
    switch (req.params.format) {
      // When json, generate suitable data
      case 'json':
        res.send(documents.map(function(d) {
          return d.__doc;
        }));
      break;

      // Else render a database template (this isn't ready yet)
      default:
        res.render('documents/index.jade');
    }
  });
});
{% endhighlight %}

This illustrates a load of core Express/Connect functionality: the routing string uses <code>:format</code> to detect if the client wants JSON or HTML.  The question mark indicates that the format can be omitted.

Notice that this pattern wraps the database operation around the actual responder code.  A similar pattern can be used for saving or deleting items.

h3. Redirection

The create document method returns JSON documents, or redirects the client when HTML is requested:

{% highlight javascript %}
app.post('/documents.:format?', function(req, res) {
  var document = new Document(req.body['document']);
  document.save(function() {
    switch (req.params.format) {
      case 'json':
        res.send(document.__doc);
       break;

       default:
        res.redirect('/documents');
    }
  });
});
{% endhighlight %}

This uses <code>res.redirect</code> to redirect the browser back to the document list.  It could redirect to the edit form just as easily.  We'll take a closer look at this when we add the user interface.

h3. Tests

I usually start building apps like this by testing the API.  It's easier to get a lot of this work done before embarking on client-side code.  The first thing to do is add a database connection for test databases:

{% highlight javascript %}
app.configure('test', function() {
  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
  db = mongoose.connect('mongodb://localhost/nodepad-test');
});
{% endhighlight %}

Then in test/app.test.js, I'm forcing the test environment:

{% highlight javascript %}
process.env.NODE_ENV = 'test';
{% endhighlight %}

That means the test database can be safely trashed.

The tests themselves take a bit of getting used to.  "Expresso":http://visionmedia.github.com/expresso/ tests work well for testing Express applications, but figuring out the finer details took serious source code reading and mailing list research.

Here's a revealing example:

{% highlight javascript %}
  'POST /documents.json': function(assert) {
    assert.response(app, {
        url: '/documents.json',
        method: 'POST',
        data: JSON.stringify({ document: { title: 'Test' } }),
        headers: { 'Content-Type': 'application/json' }
      }, {
        status: 200,
        headers: { 'Content-Type': 'application/json' }
      },

      function(res) {
        var document = JSON.parse(res.body);
        assert.equal('Test', document.title);
      });
  }
{% endhighlight %}

The name of the test, <code>'POST /documents.json'</code>, could be anything.  The framework doesn't actually parse these.  The request is defined in the first set of parameters.  In this case, I specify the <code>Content-Type</code> header.  If these aren't set to the appropriate type, the Connect middleware won't be able to parse the <code>data</code>.

I specifically wrote a test for JSON *and* <code>application/x-www-form-urlencoded</code> because readers are likely to get stumped on this in their own code.  Just remember that out of the box, Express doesn't automatically deal with encoded form data, which is why we set up <code>methodOverride</code> in the configuration block.

Refer to "commit 39e66cb":https://github.com/alexyoung/nodepad/commit/39e66cb9d11a67044495beb0de1934ac4d9c4786 to see these test examples.

h3. Conclusion

You should now understand how to:

* Stub CRUD methods with appropriate HTTP verbs in Express
* Structure apps that can be tested using Express, Expresso, and Mongoose
* Write simple Expresso tests

Next week I'll finish off the document API methods and start adding some basic HTML templates.  I intend to add a jQuery-based interface that will melt your faces off, but it's best if we get the tests and API sorted out first.

h3. References

* "The commit that pertains to this tutorial":https://github.com/alexyoung/nodepad/commit/39e66cb9d11a67044495beb0de1934ac4d9c4786 
* "Node API documentation":http://nodejs.org/api.html
* "Mongoose documentation":http://labs.learnboost.com/mongoose/
* "The Express Guide":http://expressjs.com/guide.html
* "Expresso documentation":http://visionmedia.github.com/expresso/
* "TJ explaining setting the Content-Type for tests":http://groups.google.com/group/express-js/msg/d6e3462934f4086d
* "Girl Talk's latest album":http://www.illegal-art.net/allday/

