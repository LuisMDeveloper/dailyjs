---
layout: post
title: "jQuery Roundup: 1.6.2, DropKick, dotjs"
author: Alex Young
categories: 
- jquery
- plugins
- mac
- ui
---

<div class="intro">
Note: You can send your plugins and articles in for review through our "contact form":/contact.html or "@dailyjs":http://twitter.com/dailyjs.
</div>

h3. jQuery 1.6.2

"jQuery 1.6.2 has been released":http://blog.jquery.com/2011/06/30/jquery-162-released/.  This maintenance release includes fixes for attributes in IE, a memory leak, <code>css()</code> fixes, and a whole slew of other improvements.  I was glad to see "this fix for the logic of animation callbacks":http://bugs.jquery.com/ticket/9220.

h3. DropKick

!/images/posts/dropkick.png!

"DropKick":http://jamielottering.github.com/DropKick/ (GitHub: "JamieLottering / DropKick":https://github.com/JamieLottering/DropKick, "License":https://github.com/JamieLottering/DropKick/blob/master/LICENSE) is a new custom select box plugin.  Like other related plugins, this one hides the original <code>select</code> element and proxies events and value changes.  It comes with some styles that look nice and modern.

One major issue I've had with similar plugins is the time it takes to render the custom controls.  This is typically very fast until a remote script or image blocks the loading of the assets required by the dropdown.  I don't see anything that specifically addresses this issue, but the "DropKick demo site":http://jamielottering.github.com/DropKick/ fades in selects when everything is ready.  This is preferable to native selects that suddenly transform into custom ones.

h3. dotjs

"dotjs":http://defunkt.io/dotjs/ (GitHub: "defunkt / dotjs":https://github.com/defunkt/dotjs, "License":https://github.com/defunkt/dotjs/blob/master/LICENSE) by Chris Wanstrath is a little ruby script for Mac OS and Chrome that loads JavaScript files from <code>~/.js</code>.  Adding a file called <code>~/.js/google.com.js</code> will load custom JavaScript when viewing google.com.

Each script gets jQuery 1.6 and <code>~/.js/default.js</code> will always be loaded if it's available.

This is similar to GreaseMonkey, except it's even easier to write scripts and test them.  I think it's likely that someone might fork the project and rewrite the Ruby part in Node, just to make sure they can. 
