---
layout: post
title: "Node Tutorial Part 18: Full Text Search"
author: Alex Young
categories: 
- server
- node
- tutorials
- lmawa
- nodepad
---

Welcome to part 18 of _Let's Make a Web App_, a tutorial series about building a web app with "Node":http://nodejs.org/.  This series will walk you through the major areas you'll need to face when building your own applications.  These tutorials are tagged with "lmawa":/tags.html#lmawa.

<a href="#" class="showPrevious">Click to show previous tutorials</a>.

<div class="previous" style="display: none">
* "Part 1: Introduction":http://dailyjs.com/2010/11/01/node-tutorial/ 
* "Part 2: Installation and Skeleton App":http://dailyjs.com/2010/11/08/node-tutorial-2/, source code commit: "4ea936b":https://github.com/alexyoung/nodepad/commit/4ea936b4b426012528fc722c7576391b48d5a0b7
* "Part 3: RESTful Methods and Testing":http://dailyjs.com/2010/11/15/node-tutorial-3/, source code commit: "39e66cb":https://github.com/alexyoung/nodepad/commit/39e66cb9d11a67044495beb0de1934ac4d9c4786
* "Part 4: Templates, Partials, Creating and Editing Documents":http://dailyjs.com/2010/11/22/node-tutorial-4/, source code commit: "f66fdb":https://github.com/alexyoung/nodepad/commit/f66fdb5c3bebdf693f62884ffc06a40b93328bb5
* "Part 5: Authentication, Sessions, Access Control Middleware":http://dailyjs.com/2010/12/06/node-tutorial-5/, source code commit: "03fe9b":https://github.com/alexyoung/nodepad/tree/03fe9b272fea1beb98ffefcf5f7ed226c81c49fd
* "Part 6: Interface Basics":http://dailyjs.com/2010/12/20/node-tutorial-6/, source code commit: "f2261c":https://github.com/alexyoung/nodepad/tree/f2261c510c987b35df1e6e000be6e1e591cd9d6d
* "Part 7: Node Library Versions, Jade Tricks, Error Pages":http://dailyjs.com/2010/12/27/node-tutorial-7/, source code commit: "929f5":https://github.com/alexyoung/nodepad/tree/929f5642ca1b2fa664df517457e056c92490d892
* "Part 8: Flash Messages and Helpers":http://dailyjs.com/2011/01/03/node-tutorial-8/, source code commit: "841a49":https://github.com/alexyoung/nodepad/tree/841a493c03f0421dd1a2279fccac3fbcf1e17b1f
* "Part 9: Remember Me":http://dailyjs.com/2011/01/10/node-tutorial-9/, source code commit: "1904c":https://github.com/alexyoung/nodepad/tree/1904c6b7f95d708474a5d42e8cdfd40e96243a7a
* "Part 10: Markdown":http://dailyjs.com/2011/01/24/node-tutorial-10/, source code commit: "11d33":https://github.com/alexyoung/nodepad/tree/11d33e19066e76c8559857fb780ac9fd1ecf68ac
* "Part 11: Better Testing":http://dailyjs.com/2011/01/31/node-tutorial-11/, source code commit: "6a269ce":https://github.com/alexyoung/nodepad/tree/6a269ce4ddb6c7dc78598b488c93b38828fb5763
* "Part 12: Updating Mongoose":http://dailyjs.com/2011/02/07/node-tutorial-12/, source code commit: "2a8725":https://github.com/alexyoung/nodepad/tree/2a8725f089ef052ec8b4ccfed8f6fbece70a606a
* "Part 13: Stylus":http://dailyjs.com/2011/02/14/node-tutorial-13/, source code commit: "0a70e40":https://github.com/alexyoung/nodepad/tree/0a70e40cafd982c1f2421ecf16caa887fc49ae39
* "Part 14: Email":http://dailyjs.com/2011/02/21/node-tutorial-14/, source code commit: "2e81a7b":https://github.com/alexyoung/nodepad/tree/2e81a7b8a1863db75485e4c49af5753a21266178
* "Part 15: Node Versions, npm Publishing":http://dailyjs.com/2011/02/28/node-tutorial-15/, source code commit: "89abea1":https://github.com/alexyoung/nodepad/tree/89abea12171de333159ef2be89890e9c56eb86af
* "Part 16: Updating to Node 0.4.2 and Express 2":http://dailyjs.com/2011/03/14/node-tutorial-16/, source code commit: "19fbb2":https://github.com/alexyoung/nodepad/tree/19fbb2e15dd2e247397e9d9d1caea3a4800a865e
* "Part 17: UI Improvements":http://dailyjs.com/2011/03/21/node-tutorial-17/, source code commit: "5c5fb5c":https://github.com/alexyoung/nodepad/tree/5c5fb5c5f5ad296f192dc5ca49c91aa340efe465
</div>

h3. Full Text Search

Given that we're making a document-based system, wouldn't it be nice if we had full text search?  Mongo doesn't explicitly support full text search, but "simply saving a list of keywords will work":http://www.mongodb.org/display/DOCS/Full%20Text%20Search%20in%20Mongo.

The list of keywords can be modeled as an array of strings:

{% highlight javascript %}
Document = new Schema({
  'title': { type: String, index: true },
  'data': String,
  'tags': [String],
  'keywords': [String],
  'user_id': ObjectId
});
{% endhighlight %}

Next we need to extract the strings from the document's content.  Mongoose middleware is the perfect way to do this:

{% highlight javascript %}
Document.pre('save', function(next) {
  this.keywords = extractKeywords(this.data);
  next();
});
{% endhighlight %}

The question is, how should <code>extractKeywords</code> work?  I'd usually rely on a full text indexer or a stemming library, but a simple function will be easier for now.  Let's use the following algorithm:

* Split on white space
* Find words longer than two characters
* Remove duplicates

Implementing this is fairly easy with the <code>filter</code> iterator:

{% highlight javascript %}
function extractKeywords(text) {
  if (!text) return [];

  return text.
    split(/\s+/).
    filter(function(v) { return v.length > 2; }).
    filter(function(v, i, a) { return a.lastIndexOf(v) === i; });
}
{% endhighlight %}

The regular expression matches white space, and the last <code>filter</code> will remove duplicates by checking if the index of the current value is the same as the last position that it appears.  This is a quick and dirty solution, you'd want to spend more time on this for a production system.

h3. Express Action

I've added routes for <code>/search</code> and <code>/documents/titles</code>.  The titles route will just return a list of all titles with IDs, because the document index method returns documents with all their content.

{% highlight javascript %}
app.get('/documents/titles.json', loadUser, function(req, res) {
  Document.find({ user_id: req.currentUser.id },
                [], { sort: ['title', 'descending'] },
                function(err, documents) {
    res.send(documents.map(function(d) {
      return { title: d.title, _id: d._id };
    }));
  });
});

// Search
app.post('/search.:format?', loadUser, function(req, res) {
  Document.find({ user_id: req.currentUser.id, keywords: req.body.s ? req.body.s : null },
                [], { sort: ['title', 'descending'] },
                function(err, documents) {
    switch (req.params.format) {
      case 'json':
        res.send(documents.map(function(d) {
          return { title: d.title, _id: d._id };
        }));
      break;
    }
  });
});
{% endhighlight %}

The search method expects a post with a <code>s</code> parameter to search on.

h3. Interface

!/images/posts/nodepad-search.png!

I've added a search bar on the top-right.  It was a little bit of Jade added to the "views/layout.jade":https://github.com/alexyoung/nodepad/blob/ceb9b32a09dec3a52956bc9c631b68487b34bf23/views/layout.jade file:

{% highlight text %}
#container
  #header
    ul
      li
        h1
          a(href='/') #{nameAndVersion(appName, version)}
      - if (typeof currentUser !== 'undefined')
        li.right
          a#logout(href='/sessions') Log Out
        li.right
          form.search(action='/search')
            input(name='s', value='Search')
{% endhighlight %}

With some Stylus:

{% highlight text %}
form.users input[type=submit]
  margin-left 140px
  clear both

form.search
  margin-right 10px

#show-all
  color medium-grey
{% endhighlight %}

Now, this is where I start wishing we were already using "Backbone.js":http://documentcloud.github.com/backbone/.  I've created a function for inserting documents into the list, and one to call the search method:

{% highlight javascript %}
// Search bar
function showDocuments(results) {
  for (var i = 0; i < results.length; i++) {
    $('#document-list').append('<li><a id="document-title-' + results[i]._id + '" href="/documents/' + results[i]._id + '">' + results[i].title + '</a></li>');
  }
}

function search(value) {
  $.post('/search.json', { s: value }, function(results) {
    $('#document-list').html('');
    $('#document-list').append('<li><a id="show-all" href="#">Show All</a></li>');

    if (results.length === 0) {
      alert('No results found');
    } else {
      showDocuments(results);
    }
  }, 'json');
}
{% endhighlight %}

This will automatically show and hide the "Search" text in the <code>input</code>:

{% highlight javascript %}
$('input[name="s"]').focus(function() {
  var element = $(this);
  if (element.val() === 'Search')
    element.val('');
});

$('input[name="s"]').blur(function() {
  var element = $(this);
  if (element.val().length === 0)
    element.val('Search');
});

$('form.search').submit(function(e) {
  search($('input[name="s"]').val());
  e.preventDefault();
});

$('#show-all').live('click', function(e) {
  $.get('/documents/titles.json', function(results) {
    $('#document-list').html('');
    showDocuments(results);
    if (results.length > 0)
      $('#document-title-' + results[0]._id).click();
  });
  e.preventDefault();
});
{% endhighlight %}

It also inserts a document with the title "Show All".  This is styled a little bit differently and will call <code>/documents/titles.json</code> to fetch all the titles.

h3. Indexing

I've added a Jake task that can be run with <code>jake index</code>.  It'll force all documents to save.  This is just for the reader's convenience to make existing documents get their keywords generated.

h3. Conclusion

Full text search with Mongo is fairly easy, but this implementation is far from perfect.  The keyword extraction algorithm could do with stemming, and the interface isn't as intuitive as I'd like.

This week's code was "commit ceb9b32":https://github.com/alexyoung/nodepad/tree/ceb9b32a09dec3a52956bc9c631b68487b34bf23.

