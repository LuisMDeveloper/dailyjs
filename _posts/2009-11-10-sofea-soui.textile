---
layout: post
title: What happened to SOFEA/SOUI?
author: Justin Knowlden
categories: 
- methodologies
- JSON
---

!/images/posts/sofea.png!

The concept of SOFEA (Service-Oriented Front-End Architecture), outlined in "Life Above the Service Tier (PDF)":http://wisdomofganesh.googlegroups.com/web/Life+above+the+Service+Tier+v1_1.pdf?gda=QvPUumAAAADP8jjME6tUvLP_S7C-aFm7BOCPUpqQfu0BtRm4TfOwCj195rPZqw_-mJamPCC01-dnMrcQAAjJt0hRUastxrEhZDGta7uEsApRcnlXeG-8bG3FU91bWBii3KPv5fvAM40, is not new, but it is an important concept.  If SOFEA is new to you, the principles of it are as follows:

* SOFEA is a _metamodel_ for applications that are thick or thin
* Download, presentation and data interchange are decoupled
* Presentation flow and state are managed by the client
* The presentation _tier_ must feature data structures that are as rich as the server
* Model View Controller is a good pattern for the interface

SOFEA's doppelg&auml;nger is known as "SOUI":http://www.appcelerant.com/mvc_is_dead.html (Service Oriented User Interface). It's common to see both terms listed together and the reason is that both were defined at roughly the same period of time, though Ganesh Prasad argued there was a difference in "SOFEA and SOUI - There is a Difference, After All":http://wisdomofganesh.blogspot.com/2007/11/sofea-and-soui-there-is-difference.html (also see "SOFEA: Also known as SOUI":http://raibledesigns.com/rd/entry/sofea_also_known_as_soui).  Both essentially want the same thing -- to make services act more like services regardless of the consumer.

The differences between the two proposals are not all that important.  What I took away from my initial encounter with the general approach is that of responsibility.  At that time, I had a growing internal conflict with asking the application server (Rails, Django, etc.) to also concern itself with generating everything necessary for presenting business information.

SOFEA/SOUI gave a name to my "psychosis" and suggested an alternative approach:

# Worry about how to present the information in the actual client itself;
# _Talk_ to the application server by sending and receiving only the essential nuggets of information.

JavaScript has a large part to play in realising applications built with this architecture. Frameworks like "Sammy":/2009/11/05/sammy/ and "Jaml":/2009/11/09/jaml-javascript-html-generation/ (for instance) are a step along this path. We owe it to ourselves to try and push this technology forward and to ease the burdens of our passions, allowing us more time to focus on the things that are more important; or at least those that are more interesting.

